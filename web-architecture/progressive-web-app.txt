What is a Progressive Web App:

	PWAs are web apps developed using a number of specific technologies and
	standard patterns to allow them to take advantage of both web and native app
	features. For example, web apps are more discoverable than native apps; it's
	a lot easier and faster to visit a website than to install an application,
	and you can also share web apps by sending a link.

	On the other hand, native apps are better integrated with the operating
	system and therefore offer a more seamless experience for the users. You can
	install a native app so that it works offline, and users love tapping their
	icons to easily access their favorite apps, rather than navigating to it
	using a browser.

	PWAs give us the ability to create web apps that can enjoy these same
	advantages.

	It's not a brand new concept—such ideas have been revisited many times on
	the web platform with various approaches in the past. Progressive
	Enhancement and responsive design already allow us to build mobile friendly
	websites.

	PWAs, however, provide all this and more without losing any of the existing
	features that make the web great.

What makes an app a PWA?

	As we hinted at above, PWAs are not created with a single technology. They
	represent a new philosophy for building web apps, involving some specific
	patterns, APIs, and other features. It's not that obvious if a web app is a
	PWA or not from first glance. An app could be considered a PWA when it meets
	certain requirements, or implements a set of given features: works offline,
	is installable, is easy to synchronize, can send push notifications, etc.

	In addition, there are tools to measure how complete (as a percentage) a web
	app is, such as Lighthouse. By implementing various technological
	advantages, we can make an app more progressive, thus ending up with a
	higher Lighthouse score. But this is only a rough indicator.

	There are some key principles a web app should try to observe to be
	identified as a PWA. It should be:

		Discoverable, so the contents can be found through search engines.
		
		Installable, so it can be available on the device's home screen or app
		launcher.
		
		Linkable, so you can share it by sending a URL.
		
		Network independent, so it works offline or with a poor network
		connection.
		
		Progressively enhanced, so it's still usable on a basic level on older
		browsers, but fully-functional on the latest ones.
		
		Re-engageable, so it's able to send notifications whenever there's new
		content available.
		
		Responsively designed, so it's usable on any device with a screen and a
		browser—mobile phones, tablets, laptops, TVs, refrigerators, etc.
		
		Secure, so the connections between the user, the app, and your server
		are secured against any third parties trying to get access to sensitive
		data.

	Offering these features and making use of all the advantages offered by web
	applications can create a compelling, highly flexible offering for your
	users and customers.

Is it worth it?

	Absolutely! With a relatively small amount of effort required to implement
	the core PWA features, the benefits are huge. For example:

		A decrease in loading times after the app has been installed, thanks to
		caching with service workers, along with saving precious bandwidth and
		time. PWAs have near-instantaneous loading (from the second visit).
		
		The ability to update only the content that has changed when an app
		update is available. In contrast, with a native app, even the slightest
		modification can force the user to download the entire application
		again.
		
		A look and feel that is more integrated with the native platform—app
		icons on the home screen or app launcher, applications that
		automatically run in full screen mode, etc.
		
		Re-engaging with users through the use of system notifications and push
		messages, leading to more engaged users and better conversion rates.

	It's well worth trying out a PWA approach, so you can see for yourself if it
	works for your app.

Advantages of web applications:

	