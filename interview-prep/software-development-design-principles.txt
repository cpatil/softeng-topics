Software Development Design Principles:

Keep It Simple, Stupid (KISS):

	Alternate acronyms:
		Keep it simply Stupid
		Keep it short and Simple
		Keep it simple and straightforward
		Keep it simple and smart

	"If you can't explain it, you don't understand it well enough" - Albert Einstein

	"The task of software development team is to engineer illusion of simplicity." – Grady Booch

	Software systems work best when they are kept simple. Avoiding unnecessary complexity will make your system more robust, easier to understand, easier to reason about, and easier to extend.

	It’s so obvious. But we, engineers, often tend to complicate things. We use those fancy language features that no one knows about and feel proud. We introduce countless dependencies in our project for every simple thing and end up in a dependency hell. We create endless micro-services for every simple thing.

	Remember that whenever you add a new dependency to your project, or start using that fancy new framework, or create a new micro-service, you’re introducing additional complexity to your system. You need to think whether that complexity is worth it or not.

	https://www.youtube.com/watch?v=nZcLHkORdHE

You Ain't Gonna Need It (YAGNI):

	Like KISS principle, YAGNI also aims at avoiding complexity, especially the kind of complexity that arises from adding functionality that you think you may need in the future.

	It states that you should not introduce things in order to solve a future problem that you don’t have right now. Always implement things when you actually need them. It will help you keep your software lean and simple. It will also save you extra money and effort.

	Moreover, you may think that you need that functionality in the future. But a lot of times, you may not even need it due to the ever-changing requirements of our software world.

	“Premature optimization is the root of all evil” - Donald knuth

Don't Repeat Yourself (DRY):

	The DRY principle aims at reducing the repetition of code and effort in software systems.

	It basically means that you should not write the same code/configuration in multiple places. If you do that, then you’ll have to keep them in sync; and any changes to the code at one place will require changes at other places as well.

	Every piece of knowledge must have a single, unambiguous, authoritative representation within a system

	The DRY principle promotes reusability. It makes the code more maintainable, more extensible, and less buggy.

	Following are some concepts in software engineering that are based on the DRY principle

    	Inheritance and Composition

    		Both inheritance and composition allow you to write code in one place and then reuse it at other places.

    	Database Normalization

    		Database normalization is a design technique used in databases to eliminate redundancy (repetition) of data.

SOLID:
	S Single Responsibility Principle
	O Open/Closed Principle
	L Liskov Subsititution Principle
	I Interface Segregation Principle
	D Dependency Inversion/Injection

Single Responsibility (SRP):

Open/Closed (OCP):

Liskov Subsititution (LSP):

Interface Segregation (ISP):

Dependency Inversion/Injection (DI):