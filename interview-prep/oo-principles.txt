What is Encapsulation?
Encapsulation provides objects with the ability to hide their internal characteristics and behaviour. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In java, there are three access modifiers: public, private, and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:
	- Internal state of every object is protected by hiding its attributes
	- It increases usability and maintenance of code, because the behaviour of an object can be independently changed or extended
	- It improves modularity by preventing objects to interact with each other, in an undesired way

What are the differences between Abstraction and Encapsulation?
Abstraction and encapsulation are complementary concepts. On the one hand, abstraction focuses on the behaviour of an object. On the other hand, encapsulation focuses on the implementation of an object's behaviour. Encapsulation is usually achieved by hiding information about the internal state of an object and thus, can be seen as a strategy used in order to prodive abstraction

What is Polymorphism?
There are two types of Polymorphism in Java:
	- Compile-time polymorphism (Static binding) - Method overloading
		- Methods of a class have the same name. Each method has a different number of parameters. It can have parameters with different types and order
		- Method Overloading is to add to the method behaviour. It can be extending to the method's behaviour
		- Overloaded methods will not have the same signature
		- Inheritance is not needed in this case
	- Runtime polymorphism (Dynamic binding) - Method overriding
		- The subclass has method with the name as of a superclass method. it has the number of parameters, type of parameters and the return type as a of a superclass method
		- Method Overriding is to modify the method's behaviour
		- Overridden methods will have exactly the same signature
		- Inheritance is required
		
Inheritance
Inheritance provides an object with the ability to acquire the fields and methods of another class, called base class. Inheritance provides reusability of code and can be used to add additional features to an existing class, without modifying it.

Composition
Holding the reference of a class within some other class is known as composition. When an object contains the other object, if the contained object cannot exist without the existence of container object, then it is called composition in other words, we can say that composition is the particular case of aggregation which represents a stronger relationship between two objects. Example: a class contains students. A student cannot exist without a class. There exists composition between class and students

Associations
Represents the ability of one instance to send a message to another instance. This is typically implemented with a pointer or reference instance variable, although it might also be implemented as a method argument or the create of a local variable

Aggregation
Can be defined as the relationship between two classes where the aggregate class contains a reference to the class it owns. Bested described as a has-a relationship. For example, the aggregate class Employee having various fields such as age, name, and salary also contains an object of Address class habing various fields such as Address-Line 1, City, State, and pin-code. In other words, we can say that Employee (class) has an object of Address class.