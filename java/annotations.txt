@Autowired 
	- By declaring all the bean dependencies in a Spring configuration file, Spring container can autowire relationships between collaborating beans. Spring bean autowiring.
	- @SpringBootApplication will automatically scan the components in the current package and its sub-packages
		- Will register them in Spring's Application Context, and allow us to inject beans using @Autowired

Code Examples:
@Component("fooFormatter")
public class FooFormatter {
    public String format() {
        return "foo";
    }
}
// On Properties
@Component
public class FooService {  
    @Autowired
    private FooFormatter fooFormatter;
}
// On Setters
public class FooService {
    private FooFormatter fooFormatter;
    @Autowired
    public void setFooFormatter(FooFormatter fooFormatter) {
        this.fooFormatter = fooFormatter;
    }
}
// On Constructors
public class FooService {
    private FooFormatter fooFormatter;
    @Autowired
    public FooService(FooFormatter fooFormatter) {
        this.fooFormatter = fooFormatter;
    }
}

@RequestMapping
	- Used to map both GET and POST requests
	
@RequestMapping(value="/person/{personId}",method=RequestMethod.GET)
  public Person getPersonWithId(@PathVariable Integer personId){
  	return personId;
  }
  
 @RequestMapping(value="/person/newperson",method=RequestMethod.POST)
public void addPerson(@RequestBody Person person){
 	  
}

@GetMapping
	- Specialization of the RequestMapping annotation that can be used to map to GET requests only
@GetMapping("/person/{personId}")
public Person getPersonWithId(@PathVariable Integer personId){ 
}

@PostMapping("/person/newperson") 
public void addPerson(@RequestBody Person person){ 
}

@ResponseBody
	- Return value of the method will be the body of the web response
	- Constructs the response body as JSON or XML or other media type based on:
		- MessageConverter configured in the application
		- Media-type configured by produces attribute in annotations @RequestMapping, @GetMapping
		- Media-type configured by accept request header

@RestController = @Controller + @ResponseBody

@Component (and @Service and @Repository) 
    - are used to auto-detect and auto-configure beans using classpath scanning. There's an implicit one-to-one mapping between the annotated class and the bean (i.e. one bean per class). Control of wiring is quite limited with this approach, since it's purely declarative.

@Bean 
    - Is used to explicitly declare a single bean, rather than letting Spring do it automatically as above. It decouples the declaration of the bean from the class definition, and lets you create and configure beans exactly how you choose. 

JPA Auditing
Spring Data JPA ships with an entity listener that can be used to trigger the capturing of auditing information.

@MappedSuperclass
A class designated with the MappedSuperclass annotation can be mapped in the same way as an entity except that the mappings will apply only to its subclasses since no table exists for the mapped superclass itself. When applied to the subclasses the inherited mappings will apply in the context of the subclass tables. Mapping information may be overridden in such subclasses by using the AttributeOverride and AssociationOverride annotations

@EnableJpaAuditing
Database auditing means tracking and logging events related to persistent entities, or simply entity versioning. Inspired by SQL triggers, the events are insert, update, and delete operations on entities. The benefits of database auditing are analogous to those provided by source version control

@Size (Java standard annotation)
Most importantly, @Size makes the bean independent of JPA and its vendors such as Hibernate. As a result, this is more portable than @Length.

@Length (Hibernate)
Hibernate-specific version of @Size

@Column(length=value) (JPA)
Indicate specific characteristics of the physical database column
Only used to specify table column properties as it doesn't provide validations

@Temporal(TemporalType.[DATE,TIME,TIMESTAMP])
The temporal data is the data related to time. This annotation must be specified for persistent fields or properties of type java.util.Date and java.util.Calendar. It may only be specified for fields or properties of these types

@Transient
Is used to indicate entity fields that do not participate in persistence or ignore their values are never stored in the database (similar to transient fields in Java that do not participate in serialization)
Static and Final entity fields are always considered to be transient

Persistent fields - every non-static, non-final entity field is persistent by default in Hibernate or JPA (If we are not annotated any fields)

Jackson Serialization and Deserialization Annotations
@JsonIgnore
@JsonIgnoreProperties
@JsonIgnoreType
@JsonAutoDetect

@Lob
The field should be represented as BLOB (binary data), stated differently, should be persisted as a large object to a database-supported large object type in the database. Common use of @Lob is to annotate a HashMap field inside your entity to store some of the object properties which are not mapped into DB columns.
CLOB – Character Large Object will store large text data
BLOB – Binary Large Object is for storing binary data like image, audio, or video

@JoinColumn

@MockMvc
Main entry point for the Spring MVC Test framework which can help you test controllers explicitly starting a servlet container. Can execute requets by calling its perform(RequestBuilder requestBuilder) method

@SpringBootTest
General test annotation. Looks for for a main configuration (@SpringBootApplication), and uses that to start a Spring application context. SpringBootTest loads complete application and injects all the beans. Slow

@WebMvcTest
Only going to scan the controller you've defined and the mvc infrastructure. Explicitly define a mock for any dependencies. This is fast since it only loads a tiny portion of the app. Uses slicing. Intended to test unitarily the controller from the server 

@Slf4j
Simple logging facade for java, serves as a simple facade or abstraction for various logging frameworks

@Mock (Mockito.mock())
To stub return values for its methods and verify if they were called

@MockBean
Used to add mocks to a Spring ApplicationContext.
The mock will replace any existing bean of the same type in the application context. If no bean of the same type is defined, a new one will be added. Useful in integration tests where a particular bean, like an external service, needs to be mocked.












