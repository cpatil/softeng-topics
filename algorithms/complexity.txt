Time Complexity:
Is the computational complexity that describes the amount of computer time it takes to run an algorithm

Is generally expressed as the number of required elementary operations on an input of size n, where elementary operations are assumed to take a constant amount of time on a given computer and change only by a constant factor when run on a different computer

Common Big-O Complexities:
Constant Time O(1)
Logarithmic Time O(log n)
Linear Time O(n)
Quadratic Time O(n^2)
Cubic Time O(n^3)
Factorial Time O(n!)

Space Complexity:
Is generally expressed as the amount of memory required by an algorithm on an input of size n

Computational Complexitity (analysis of algorithms):
Is the amount of resources required to run it, focues on time and memory requirements

The complexity of a problem is the complexity of the best algorithms that allow solving the problem

Since an algorithm's running time may vary among different inputs of the same size, one commonly considers the worst-case time complexity, which is the maximum amount of time required for inputs of a given size. 

Less common is the average-case complexity, which is the average of the time taken on inputs of a given size

One commonly focuses on the behaviour of the complexity when the input size increases--that is, the asymptotic behaviour of the complexity. Therefore, it's expressed using big O notation O(n) where n is the input

The complexity of an algorthm is always an upper bound on the complexity of the problem solved by this algorithm

Focuses on the behaviour of the complexity for large n, that is on its asymptotic behaviour when n tends to the infinity.