 A NoSQL (originally referring to "non-SQL" or "non-relational") database
 provides a mechanism for storage and retrieval of data that is modeled in means
 other than the tabular relations used in relational databases. Such databases
 have existed since the late 1960s, but the name "NoSQL" was only coined in the
 early 21st century, triggered by the needs of Web 2.0 companies. NoSQL
 databases are increasingly used in big data and real-time web applications.
 NoSQL systems are also sometimes called "Not only SQL" to emphasize that they
 may support SQL-like query languages or sit alongside SQL databases in
 polyglot-persistent architectures.

Motivations for this approach include simplicity of design, simpler "horizontal"
scaling to clusters of machines (which is a problem for relational databases),
finer control over availability and limiting the object-relational impedance
mismatch. The data structures used by NoSQL databases (e.g. key–value pair, wide
column, graph, or document) are different from those used by default in
relational databases, making some operations faster in NoSQL. The particular
suitability of a given NoSQL database depends on the problem it must solve.
Sometimes the data structures used by NoSQL databases are also viewed as "more
flexible" than relational database tables.

Many NoSQL stores compromise consistency (in the sense of the CAP theorem) in
favor of availability, partition tolerance, and speed. Barriers to the greater
adoption of NoSQL stores include the use of low-level query languages (instead
of SQL, for instance), lack of ability to perform ad hoc joins across tables,
lack of standardized interfaces, and huge previous investments in existing
relational databases.[10] Most NoSQL stores lack true ACID transactions,
although a few databases have made them central to their designs.

Instead, most NoSQL databases offer a concept of "eventual consistency", in
which database changes are propagated to all nodes "eventually" (typically
within milliseconds), so queries for data might not return updated data
immediately or might result in reading data that is not accurate, a problem
known as stale reads. Additionally, some NoSQL systems may exhibit lost writes
and other forms of data loss. Some NoSQL systems provide concepts such as
write-ahead logging to avoid data loss. For distributed transaction processing
across multiple databases, data consistency is an even bigger challenge that is
difficult for both NoSQL and relational databases. Relational databases "do not
allow referential integrity constraints to span databases". Few systems maintain
both ACID transactions and X/Open XA standards for distributed transaction
processing. Interactive relational databases share conformational relay analysis
techniques as a common feature. Limitations within the interface environment are
overcome using semantic virtualization protocols, such that NoSQL services are
accessible to most operating systems.

Key–value cache 							

	Apache Ignite, Couchbase, Coherence, eXtreme Scale, Hazelcast, Infinispan,
	Memcached, Redis, Velocity

Key–value store 	
	
	Azure Cosmos DB, ArangoDB, Aerospike, Couchbase, Redis

Key–value store (eventually consistent) 	

	Azure Cosmos DB, Oracle NoSQL Database, Dynamo, Riak, Voldemort

Key–value store (ordered) 	
	
	FoundationDB, InfinityDB, LMDB, MemcacheDB

Tuple store 	

	Apache River, GigaSpaces

Object database 	
	
	Objectivity/DB, Perst, ZopeDB

Document store 	
	
	Azure Cosmos DB, ArangoDB, BaseX, Clusterpoint, Couchbase, CouchDB,
	DocumentDB, eXist-db, IBM Domino, MarkLogic, MongoDB, Qizx, RethinkDB,
	Elasticsearch

Wide Column Store 	
	
	Azure Cosmos DB, Amazon DynamoDB, Bigtable, Cassandra, Google Cloud
	Datastore, HBase, Hypertable, ScyllaDB

Native multi-model database 	
	
	ArangoDB, Azure Cosmos DB, OrientDB, MarkLogic