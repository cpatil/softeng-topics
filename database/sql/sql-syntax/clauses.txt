Order of Execution:
The SQL order of execution defines the order in which the clauses of a query are
evaluated. Some of the most common query challenges people run into could be
easily avoided with a clearer understanding of the SQL order of execution,
sometimes called the SQL order of operations. Understanding SQL query order can
help you diagnose why a query won't run, and even more frequently will help you
optimize your queries to run faster.

1. 	FROM, including JOIN
2.	WHERE 
3. 	GROUP BY
4.	HAVING
5. 	WINDOW functions
6. 	SELECT
7. 	DISTINCT
8. 	UNION
9. 	ORDER BY
10.	LIMIT and OFFSET

ALTER TABLE: Lets you add columns to a table in a database.
	ALTER TABLE table_name
	ADD column_name datatype;

AND: Is an operator that combines two conditions. Both conditions must be true
for the row to be included in the result set.
	SELECT column_name(s)
	FROM table_name
	WHERE column_1 = value_1
		AND column_2 = value_2;

AS: Allows you to rename a column or table using an alias
	SELECT column_name AS 'Alias'
	FROM table_name;

AVG(): Is an aggregate function that returns the average value for a numeric
column
	SELECT AVG(column_name)
	FROM table_name;

BETWEEN: Is used to filter the result set within a certain range. The values can
be numbers, text or dates
	SELECT column_name(s)
	FROM table_name
	WHERE column_name BETWEEN value_1 AND value_2;

CASE: Statements are used to create different outputs (usually in the SELECT
statement). It is SQL's way of handling if-then logic
	SELECT column_name,
		CASE
			WHEN condition THEN 'Result_1'
			WHEN condition THEN 'Result_2'
			ELSE 'Result_3'
		END
	FROM table_name;

COUNT(): Is a function that takes the name of a column as an argument and counts
the number of rows where the column is not NULL
	SELECT COUNT(column_name)
	FROM table_name;

CREATE TABLE: Create a new table in the database. It allows you to specify the
name of the table and the name of each column in the table
	CREATE TABLE table_name (
		column_1 datatype,
		column_2 datatype, 
		column_3 datatype
	);

DELETE: Statements are used to remove rows from a table
	DELETE FROM table_name
	WHERE some_column = some_value;

GROUP BY: Only used with aggregate functions. It is used in collaboration with
the SELECT statement to arrange identical data into groups
	SELECT column_name, COUNT(*)
	FROM table_name
	GROUP BY column_name;

ON: When writing an INNER JOIN or LEFT JOIN query, we happen to use the ON
clause to define the join condition
	SELECT post.post_id, title, review
	FROM post
	INNER JOIN post_comment ON post.post_id = post_comment.post_id
	ORDER BY post.post_id, post_comment_id;

USING: When the Foreign Key column and the column it references have the same
name, we can use the USING clause
	SELECT post_id, title, review
	FROM post
	INNER JOIN post_comments USING(post_id)
	ORDER BY post_id, post_comment_id;

HAVING: Was added to SQL because the WHERE keyword could not be used with
aggregate functions
	SELECT column_name, COUNT(*)
	FROM table_name
	GROUP BY column_name
	HAVING COUNT(*) > value;

INNER JOIN: An inner join will combine rows from different tables if the join
condition is true.
	SELECT column_name(s)
	FROM table_1
	JOIN table_1
		ON table_1.column_name = table_2.column_name;

INSERT: Used to add a new row to a table
	INSERT INTO table_name (column_1, column_2, column_3)
	VALUES (value_1, 'value_2', value_3);

IS NULL / IS NOT NULL: Used with the WHERE clause to test for empty values
	SELECT column_name(s)
	FROM table_name
	WHERE column_name IS NULL;

LIKE: Is a special operator used with the WHERE clause to search for a specific
pattern in a column
	SELECT column_name(s)
	FROM table_name
	WHERE column_name LIKE pattern;

LIMIT: Is a clause that lets you specify the maximum number of rows the result
set will have
	SELECT column_name(s)
	FROM table_name
	LIMIT number;

MAX(): Is a function that takes the name of a column as an argument and returns
the largest value in that column
	SELECT MAX(column_name)
	FROM table_name;

MIN(): Is a function that takes the name of a column as an argument and returns
the smallest value in that column
	SELECT MIN(column_name)
	FROM table_name;


OR: Filters the result set to only include rows where either condition is true
	SELECT column_name
	FROM table_name
	WHERE column_name = value_1
		OR column_name = value_2;

ORDER BY: Indicates you want to sort the result set by a particular column
either alphabetically or numerically
	SELECT column_name
	FROM table_name
	ORDER BY column_name ASC | DESC;

OUTER JOIN: An outer join will combine rows from different tables even if the
join condition is not met. Every row in the left table is returned in the result
set, and if the join condition is not met, then NULL values are used to fill in
the columns from the right table
	SELECT column_name(s)
	FROM table_1
	LEFT JOIN table_2
		ON table_1.column_name = table_2.column_name;

ROUND(): Is a function that takes a column name and an integer as arguments. It
rounds the values in the volumn to the number of decimal places specified by the
integer.
	SELECT ROUND(column_name, integer)
	FROM table_name;

SELECT: Used to fetch data from a database. Every query will begin with SELECT
	SELECT * FROM table_name;

SELECT DISTINCT: Specifies that the statement is going to be a query that
returns unique values in the specified column(s)
	SELECT DISTINCT column_name
	FROM table_name;

SUM(): Is a function that takes the name of a column as an argument and returns
the sum of all the values in that column
	SELECT SUM(column_name)
	FROM table_name;

UPDATE: Allow you to edit rows in a table
	UPDATE table_name
	SET some_column = some_value
	WHERE some_column = some_value;

WHERE: Indicates you want to filter the result set to include only rows where
the following condition is true
	SELECT column_name(s)
	FROM table_name
	WHERE column_name operator value;

WITH: Lets you store the result of a query in a temporary table using an alias.
You can also define multiple temporary tables using a comma and with one
instance of the WITH keyword. The WITH clause is also known as common table
expression (CTE) and subquery factoring.

Difference between JOIN and UNION:

JOIN: A join is used for displaying columns with the same or different names
from different tables. The output displayed will have all the columns shown
individually. That is, the columns will be aligned next to each other.

UNION: The UNION set operator is used for combining data from two tables which
have columns with the same datatype. When a UNION is performed the data from
both tables will be collected in a single column having the same datatype.

For example:

See the two tables shown below:

Table t1
Articleno article price manufacturer_id
1 hammer 3 $ 1
2 screwdriver 5 $ 2

Table t2
manufacturer_id manufacturer
1 ABC Gmbh
2 DEF Co KG

Now for performing a JOIN type the query is shown below.

SELECT articleno, article, manufacturer
FROM t1 JOIN t2 ON (t1.manufacturer_id =
t2.manufacturer_id);

articelno article manufacturer
1 hammer ABC GmbH
2 screwdriver DEF Co KG

That is a join.

UNION means that you have to tables or resultset with the same amount and type of columns and you add this to tables/resultsets together. Look at this example:

Table year2006
Articleno article price manufacturer_id
1 hammer 3 $ 1
2 screwdriver 5 $ 2

Table year2007
Articleno article price manufacturer_id
1 hammer 6 $ 3
2 screwdriver 7 $ 4

SELECT articleno, article, price, manufactruer_id
FROM year2006
UNION
SELECT articleno, article, price, manufacturer_id
FROM year2007

articleno article price manufacturer_id
1 hammer 3 $ 1
2 screwdriver 5 $ 2
1 hammer 6 $ 3
2 screwdriver 7 $ 4

