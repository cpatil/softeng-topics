Lexical Structure
--------------------------------------------------------------------------
A command is composed of a sequence of tokens

A token can be a key word, an identifier, a quoted identifier, a literal (or constant), 
or a special character symbol

Implicitly-typed constants: strings, bit strings, and numbers
A string is bounded by single quotes, e.g. 'This is a string with Dianne''s horse'

Escape characters by doubling them

Backslash Escape Sequence       Interpretation
------------------------------------------------
\b                              backspace
\f                              formfeed
\n                              newline
\r                              carriage return
\t                              tab
\o, \oo, \ooo (o=(0-7))         octal byte value
\xh, \xhh (h=(0-9,A-F))         hexadecimal byte value
\uxxx, \Uxxxx (x=(0-9,A-F))     16 or 32-bit hexadecimal Unicode character value

Dollar-Quoted String Constants (for escaping): 
$$Dianne's horse$$
$SomeTag$Dianne's horse$SomeTag$

Bit-String Constants
Dolar quoting cannot be used in a bit-string conastant
Binary: B'1001'
Hexadecimal: X'1FF'

Numeric Constants
Constants that contain decimal points and/or exponents are always initially type Numeric
otherwise persumed integer (32 bit) or bigint(64bit) if it fits

Cast to specific data type:
    To be treated as type real (float4)
    REAL '1.23' -- string style
    1.23::REAL  -- PostgreSQL style

Constants of Other Types
Arbitrary type notations:
    type 'string':
        Only used to specify the type of a simple literal constant
        Does not work for array types (PostgreSQL allows it for all types)
    'string'::type
    CAST ('string' as type)

Comments: -- (single) and /* (multi-line)

Special Characters
A dollar sign ($) followed by digits is used to represent a positional parameter in the body of a function definition or a prepared statement. In other contexts the dollar sign can be part of an identifier or a dollar-quoted string constant

Parentheses (()) have their usual meaning to group expressions and enforce precedence. In some cases parentheses are required as part of the fixed syntax of a particular SQL command

Brackets ([]) are used in some syntactical constructs to separate the elements of a list

Commas (,) are used in some syntactical constructs to separate the elements of a list

The semicolon (;) terminates an SQL command. It cannot appear anywhere within a command, except within a string constant or quoted identifier

The colon (:) is used to select "slices" from arrays. In certain SQL dialects (such as Embedded SQL), the colon is used to prefix variable names

The asterisk (*) is used in some contexts to denote all the fields of a table row or composite value. 

The period (.) is used in numeric constants, and to separate schema, table, and column names

Operator Precedence (highest to lowest)
--------------------------------------------------------
Operator/Elements                   Description
--------------------------------------------------------
.                                   table/column name separator                       
::                                  PostgreSQL-style typecast
[]									array element selection
+ -									unary plus, unary minus
^									exponentiation
* / %								multiplication, division, modulo
+ -									addition, subtraction
(any other operator)				all other native and user-defined operators
BETWEEN IN LIKE ILIKE SIMILAR		range containment, set membership, string matching
< > = <= >= <>						comparison operators
IS ISNULL NOTNULL					IS TRUE, IS FALSE, IS NULL, IS DISTINCT FROM, etc
NOT									logical negation
AND									logical conjunction
OR									logical disjunctionAn aggregate function is a mathematical computation involving a range of values that results in just a single value expressing the significance of the accumlated data it is derived from.Aggregate functions compute a single result from a set of input values.
General-Purpose Aggregate Functions
--------------------------------------
Function 								Argument Type(s) 					Return Type 						Description
-------------------------------------------------------------------------------------------------------------------------------------------
array_agg(expression) 					any non-array type 					array of the argument type 			input values, including nulls, concatenated into an array
array_agg(expression) 					any array type 						same as argument data type 			input arrays concatenated into array of one higher dimension (inputs must all have same dimensionality, and cannot be empty or null)
avg(expression) 						smallint, int, bigint, 
										real, double precision, 
										numeric, or interval 				numeric for any integer-type 
																			argument, double precision 
																			for a floating-point argument, 
																			otherwise the same as the 
																			argument data type 					the average (arithmetic mean) of all non-null input values
bit_and(expression) 					smallint, int, bigint, or bit 		same as argument data type 			the bitwise AND of all non-null input values, or null if none
bit_or(expression) 						smallint, int, bigint, or bit 		same as argument data type 			the bitwise OR of all non-null input values, or null if none
bool_and(expression) 					bool 								bool 								true if all input values are true, otherwise false
bool_or(expression) 					bool 								bool 								true if at least one input value is true, otherwise false
count(*) 	  																bigint 								number of input rows
count(expression) 						any 								bigint 								number of input rows for which the value of expression is not null
every(expression) 						bool 								bool 								equivalent to bool_and
json_agg(expression) 					any 								json 								aggregates values, including nulls, as a JSON array
jsonb_agg(expression) 					any 								jsonb 								aggregates values, including nulls, as a JSON array
json_object_agg(name, value) 			(any, any) 							json 								aggregates name/value pairs as a JSON object; values can be null, but not names
jsonb_object_agg(name, value) 			(any, any) 							jsonb 								aggregates name/value pairs as a JSON object; values can be null, but not names
max(expression) 						any numeric, string, 
										date/time, network, 
										or enum type, or arrays 
										of these types 						same as argument type 				maximum value of expression across all non-null input values
min(expression) 						any numeric, string, 
										date/time, network, 
										or enum type, or arrays
										 of these types 					same as argument type 				minimum value of expression across all non-null input values
string_agg(expression, delimiter) 		(text, text) or (bytea, bytea) 		same as argument types 				non-null input values concatenated into a string, separated by delimiter
sum(expression) 						smallint, int, bigint,
										real, double precision, 
										numeric, interval, or money 		bigint for smallint or 
																			int arguments, numeric 
																			for bigint arguments, 
																			otherwise the same as 
																			the argument data type 				sum of expression across all non-null input values
xmlagg(expression) 						xml 								xml 								concatenation of non-null XML values (see also Section 9.14.1.7)