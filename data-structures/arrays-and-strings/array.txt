Array Data Structure Notes W/ Examples
 
By: Joshua Henriques 

Arrays:
- Collection of elements (values or vaiables), each identified by at 
    lease one array index or key
- Needs a memory block for allocation, called consecutive memory location
- Stores elements at a contiguous memory location
- Is stored such that the position of each element can be computed from
    its index tuple by a mathematical formula.
- Memory is a one-dimensional array of words, whose indices are their 
    addresses
- Processors/Vector processors are optimized for array operations
- Useful mostly because the element indices can be computed at run time,
    this feature allows a single iterative statement to process arbitrarily
    many elements.
- Required to have the same size and should use the same data representation (homogenous)
- The set of valid index tuples and the addresses of the elements are usually,
    but not always, fixed while the array is in use
- Associative array (abstract array)*
- In order to create a shorter or longer array, you need to create a new array and
  copy all elements from old to new
- Immutable, mutable arrays are called list

Usages:
- To implement mathematical vectors and matrices, as well as other rectangular
  tables
- Databases consist of (or include) 1D arrays whose elements are records
- To implement lists, heaps, hash tables, deques, queues, stacks, strings, VLists
- Used to emulate in-program dynamic memory allocation, particularly memory pool
  allocation
- To implement control tables that are used in conjection with a purpose built
  interpreter whose control flow is altered according to the elements

Efficiency:
- Offers fast O(1) search if you know the index, but adding and removing an element is slow
  because you cannot change the size 
- Both store and select take (deterministic worst case) constant time. Arrays 
  take linear O(n) space in the number of elements n that they hold
*- Sequential iteration over an array is noticeably faster in practice than iteration
    over many other data structures, a property called locality of reference 
    - Locality is a type of predicatable behaviour that occurs in computer systems
    - Systems with strong locality of reference are greate candidates for performance
      optimization through the use of caching, prefetching for memory and advanced
      branch predictors at the pipelining stage of a processor core   
    - Locality of reference (princible of locality): is the tendency of a processor
        to access the same set of memory locations repetitively over a short period of 
        time. Two types: 
        - Temporal locality refers to the reuse of specific data and/or
          resources within a relatively small time duration.
        - Spatial locality (data locality) refers to the use of data elements within 
          relatively close storage locations 
        - Sequential locality, a special case of spatial locality, occurs when data
          elements are arranged and accessed linearly, such as traversing the elements
          in a one-dimensional array
- Memory-wise, arrays are compact data structures with no per-element overhead.
- Elements stored in an array can require less memory because several array elements 
  can be stored in a single word; such arrays are called packed arrays
    - Word: Is a fixed-sized piece of data handled as a unit by the instruction set or
      the hardware of the processor
        - The number of bits in a word is an important characteristic of any specification
          processor design or computer architecture

Type Code               C Type                Python Type               Min size in bytes to
'b'                     signed char           int                       1
'B'                     unsigned char         int                       1
'u'                     wchar_t               unicode char              2
'h'                     signed short          int                       2
'H'                     unsigned short        int                       2
'i'                     signed int            int                       2
'I'                     unsigned int          int                       2
'l'                     signed long           int                       4
'L'                     unsigned long         int                       4
'q'                     signed long long      int                       8
'Q'                     unsigned long long    int                       8
'f'                     float                 int                       4
'd'                     double                int                       8