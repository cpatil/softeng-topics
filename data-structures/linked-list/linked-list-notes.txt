Linked List Is a linear collection of data elements whose order is not given by
their physical placement in memory. Instead, each element points to the next.

Consists of a collection of nodes which together represent a sequence. This
structure allows for efficient insertion or removal of elements form any
position in the sequence during iteration. 

More complex variants add additional links, allowing more efficient insertion or
removal of nodes at arbitrary positions

A drawback of linked lists is that access time is linear (and difficult to
pipeline)

Faster access, such as random access, is not feasible. Arrays have better cache
locality compared to linked lists

Used to implement lists, stacks, queues, associative arrays, and S-expressions,
though it is not uncommon to implement those data structures directly without
using a linked list as the basis


Singly-Linked List & Doubly-Linked List

A number of linked list problems rely on recursion

The "Runner" Technique The "runner" (or second pointer) technique is used in
many linked list problems. The runner technique means that you iterate through
the linked list with two pointers simultaneously, with one ahead of the other.
The "fast" node might be ahead by a fixed amount, or it might be hopping
multiple nodes for each one node that the "slow" node iterates through.

For example, suppose you had a linked list a1 -> a2 -> ... -> an -> b1 -> b2 ->
... -> bn and you wanted to rearrange it into a1 -> b1 -> a2 -> ... ->an -> bn.
You do not know the length of the linked list (but you do know that the length
is an even number).

You could have one pointer p1 (the fast pointer) move every two elements for
every one move that p2 makes. When p1 hits the end of the linked list, p2 will
be at the midpoint. Then, move p1 back to the front and begin "waving" the
elements. On each iteration, p2 selects an element and inserts it after p1.